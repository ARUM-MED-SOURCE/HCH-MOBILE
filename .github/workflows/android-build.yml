name: Android Build

on:
  pull_request:
    types: [opened, synchronize]
    branches: [dev,main]

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Install Android SDK
      uses: android-actions/setup-android@v2
      with:
        api-level: 29
        build-tools-version: '25.0.3'
        platform: 'android-29'
        
    - name: Install Ant
      run: |
        choco install ant -y
        
    - name: Create Android Ant Build Script
      run: |
        mkdir -p android-ant
        echo "<?xml version='1.0' encoding='UTF-8'?>" > android-ant/build.xml
        echo "<project name='android' default='help'>" >> android-ant/build.xml
        echo "  <property name='sdk.dir' value='$env:ANDROID_HOME'/>" >> android-ant/build.xml
        echo "  <property name='target' value='android-29'/>" >> android-ant/build.xml
        echo "  <property name='buildtools.version' value='25.0.3'/>" >> android-ant/build.xml
        echo "  <property name='key.store' value='keystore/umkey'/>" >> android-ant/build.xml
        echo "  <property name='key.alias' value='alias'/>" >> android-ant/build.xml
        echo "  <property name='key.store.password' value='${{ secrets.KEY_STORE_PASSWORD }}'/>" >> android-ant/build.xml
        echo "  <property name='key.alias.password' value='${{ secrets.KEY_STORE_PASSWORD }}'/>" >> android-ant/build.xml
        echo "  <taskdef name='aapt' classname='com.android.ant.AaptTask' classpath='$env:ANDROID_HOME/cmdline-tools/latest/lib/ant-tasks.jar'/>" >> android-ant/build.xml
        echo "  <taskdef name='aidl' classname='com.android.ant.AidlTask' classpath='$env:ANDROID_HOME/cmdline-tools/latest/lib/ant-tasks.jar'/>" >> android-ant/build.xml
        echo "  <taskdef name='apkbuilder' classname='com.android.ant.ApkBuilderTask' classpath='$env:ANDROID_HOME/cmdline-tools/latest/lib/ant-tasks.jar'/>" >> android-ant/build.xml
        echo "  <taskdef name='dx' classname='com.android.ant.DxTask' classpath='$env:ANDROID_HOME/cmdline-tools/latest/lib/ant-tasks.jar'/>" >> android-ant/build.xml
        echo "  <taskdef name='javac' classname='com.android.ant.JavacTask' classpath='$env:ANDROID_HOME/cmdline-tools/latest/lib/ant-tasks.jar'/>" >> android-ant/build.xml
        echo "  <taskdef name='zipalign' classname='com.android.ant.ZipAlignTask' classpath='$env:ANDROID_HOME/cmdline-tools/latest/lib/ant-tasks.jar'/>" >> android-ant/build.xml
        echo "  <target name='help'>" >> android-ant/build.xml
        echo "    <echo>Available targets:</echo>" >> android-ant/build.xml
        echo "    <echo>  release: Build release APK</echo>" >> android-ant/build.xml
        echo "  </target>" >> android-ant/build.xml
        echo "  <target name='release'>" >> android-ant/build.xml
        echo "    <mkdir dir='bin'/>" >> android-ant/build.xml
        echo "    <javac srcdir='src' destdir='bin' includeantruntime='false'/>" >> android-ant/build.xml
        echo "    <dx input='bin' output='bin/classes.dex'/>" >> android-ant/build.xml
        echo "    <aapt executable='$env:ANDROID_HOME/build-tools/25.0.3/aapt.exe' command='package' versioncode='1' debug='false' manifest='AndroidManifest.xml' assets='assets' res='res' out='bin/resources.ap_'/>" >> android-ant/build.xml
        echo "    <apkbuilder outfile='bin/app-release.apk' signed='true' signedjar='bin/app-release-signed.apk' keystore='keystore/umkey' storepass='${{ secrets.KEY_STORE_PASSWORD }}' alias='umkey' keypass='${{ secrets.KEY_ALIAS_PASSWORD }}'>" >> android-ant/build.xml
        echo "      <sourcefolder path='bin/classes.dex'/>" >> android-ant/build.xml
        echo "      <sourcefolder path='bin/resources.ap_'/>" >> android-ant/build.xml
        echo "    </apkbuilder>" >> android-ant/build.xml
        echo "    <zipalign in='bin/app-release-signed.apk' out='bin/app-release.apk'/>" >> android-ant/build.xml
        echo "  </target>" >> android-ant/build.xml
        echo "</project>" >> android-ant/build.xml
        
    - name: Create build.xml
      run: |
        echo "<?xml version='1.0' encoding='UTF-8'?>" > build.xml
        echo "<project name='HCH_MOBILE_CONSENT_STG' default='help'>" >> build.xml
        echo "  <import file='android-ant/build.xml'/>" >> build.xml
        echo "</project>" >> build.xml
        
    - name: Build with Ant
      run: |
        cmd /c "ant release"
      env:
        ANDROID_HOME: ${{ env.ANDROID_HOME }}
        ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release
        path: bin/*-release.apk
        
    - name: Run Lint
      run: |
        cmd /c "$env:ANDROID_HOME\tools\bin\lint --config lint.xml ."
      env:
        ANDROID_HOME: ${{ env.ANDROID_HOME }}
        ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        
    - name: Notify Slack on Build Status
      if: always()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "${{ job.status == 'success' && '✅' || '❌'}} Android CI 빌드 결과\n• 성공 유무: ${{ job.status }}\n• 저장소: ${{ github.repository }}\n• 브랜치: ${{ github.ref_name }}\n\n<${github.server_url}/${github.repository}/actions/runs/${github.run_id}|빌드된 APK 다운로드 링크>"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING-WEBHOOK 