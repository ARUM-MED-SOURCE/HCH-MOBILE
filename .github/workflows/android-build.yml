name: Android Build

on:
  pull_request:
    types: [opened, synchronize]
    branches: [dev,main]

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Install Android SDK
      uses: android-actions/setup-android@v2
      with:
        api-level: 29
        build-tools-version: '25.0.3'
        platform: 'android-29'
        
    - name: Install Ant
      run: |
        choco install ant -y
        
    - name: Create required directories
      run: |
        if (-not (Test-Path gen)) { New-Item -ItemType Directory -Path gen }
        if (-not (Test-Path bin/classes)) { New-Item -ItemType Directory -Path bin/classes -Force }
        
    - name: Create build.xml
      run: |
        echo "<?xml version='1.0' encoding='UTF-8' standalone='no'?>" > build.xml
        echo "<!-- WARNING: Eclipse auto-generated file." >> build.xml
        echo "              Any modifications will be overwritten." >> build.xml
        echo "              To include a user specific buildfile here, simply create one in the same" >> build.xml
        echo "              directory with the processing instruction <?eclipse.ant.import?>" >> build.xml
        echo "              as the first entry and export the buildfile again. -->" >> build.xml
        echo "<project basedir='.' default='build' name='HCH_MOBILE_CONSENT_STG'>" >> build.xml
        echo "    <property environment='env'/>" >> build.xml
        echo "    <property name='debuglevel' value='source,lines,vars'/>" >> build.xml
        echo "    <property name='target' value='1.8'/>" >> build.xml
        echo "    <property name='source' value='1.8'/>" >> build.xml
        echo "    <property name='key.store' value='keystore/umkey'/>" >> build.xml
        echo "    <property name='key.alias' value='alias'/>" >> build.xml
        echo "    <property name='key.store.password' value='${{ secrets.KEY_STORE_PASSWORD }}'/>" >> build.xml
        echo "    <property name='key.alias.password' value='${{ secrets.KEY_STORE_PASSWORD }}'/>" >> build.xml
        echo "    <path id='Android 10.libraryclasspath'>" >> build.xml
        echo "        <pathelement location='$env:ANDROID_HOME/platforms/android-29/android.jar'/>" >> build.xml
        echo "    </path>" >> build.xml
        echo "    <path id='Android Private Libraries.libraryclasspath'>" >> build.xml
        echo "        <pathelement location='libs/json-simple-1.1.1 (1).jar'/>" >> build.xml
        echo "        <pathelement location='libs/zxing_core.jar'/>" >> build.xml
        echo "        <pathelement location='libs/icert.jar'/>" >> build.xml
        echo "        <pathelement location='libs/android-support-v4.jar'/>" >> build.xml
        echo "        <pathelement location='libs/ksoap2-android-assembly-2.4-jar-with-dependencies_PATCH_TIZIANA.jar'/>" >> build.xml
        echo "        <pathelement location='libs/andorid_kmi.jar'/>" >> build.xml
        echo "        <pathelement location='libs/java-json.jar'/>" >> build.xml
        echo "        <pathelement location='libs/cordovalib.jar'/>" >> build.xml
        echo "        <pathelement location='libs/gson-2.8.5.jar'/>" >> build.xml
        echo "        <pathelement location='libs/CLIPe-FormToolkit_2.5.153_221125.jar'/>" >> build.xml
        echo "        <pathelement location='libs/jackson-all-1.9.0.jar'/>" >> build.xml
        echo "        <pathelement location='libs/SignKorea-Android.jar'/>" >> build.xml
        echo "        <pathelement location='libs/mTranskeyCrypto.jar'/>" >> build.xml
        echo "        <pathelement location='libs/commons-codec.jar'/>" >> build.xml
        echo "        <pathelement location='libs/commons-net-3.5.jar'/>" >> build.xml
        echo "    </path>" >> build.xml
        echo "    <path id='HCH_MOBILE_CONSENT_STG.classpath'>" >> build.xml
        echo "        <path refid='Android 10.libraryclasspath'/>" >> build.xml
        echo "        <path refid='Android Private Libraries.libraryclasspath'/>" >> build.xml
        echo "        <pathelement location='bin/classes'/>" >> build.xml
        echo "    </path>" >> build.xml
        echo "    <target name='init'>" >> build.xml
        echo "        <mkdir dir='bin/classes'/>" >> build.xml
        echo "        <mkdir dir='gen'/>" >> build.xml
        echo "        <copy includeemptydirs='false' todir='bin/classes'>" >> build.xml
        echo "            <fileset dir='src'>" >> build.xml
        echo "                <exclude name='**/*.launch'/>" >> build.xml
        echo "                <exclude name='**/*.java'/>" >> build.xml
        echo "            </fileset>" >> build.xml
        echo "        </copy>" >> build.xml
        echo "        <copy includeemptydirs='false' todir='bin/classes'>" >> build.xml
        echo "            <fileset dir='gen'>" >> build.xml
        echo "                <exclude name='**/*.launch'/>" >> build.xml
        echo "                <exclude name='**/*.java'/>" >> build.xml
        echo "            </fileset>" >> build.xml
        echo "        </copy>" >> build.xml
        echo "    </target>" >> build.xml
        echo "    <target name='clean'>" >> build.xml
        echo "        <delete dir='bin/classes'/>" >> build.xml
        echo "    </target>" >> build.xml
        echo "    <target depends='clean' name='cleanall'/>" >> build.xml
        echo "    <target depends='build-subprojects,build-project' name='build'/>" >> build.xml
        echo "    <target name='build-subprojects'/>" >> build.xml
        echo "    <target depends='init' name='build-project'>" >> build.xml
        echo "        <echo message='${ant.project.name}: ${ant.file}'/>" >> build.xml
        echo "        <javac debug='true' debuglevel='${debuglevel}' destdir='bin/classes' includeantruntime='false' source='${source}' target='${target}'>" >> build.xml
        echo "            <src path='src'/>" >> build.xml
        echo "            <src path='gen'/>" >> build.xml
        echo "            <classpath refid='HCH_MOBILE_CONSENT_STG.classpath'/>" >> build.xml
        echo "        </javac>" >> build.xml
        echo "    </target>" >> build.xml
        echo "    <target description='Build all projects which reference this project. Useful to propagate changes.' name='build-refprojects'/>" >> build.xml
        echo "    <target name='release'>" >> build.xml
        echo "        <mkdir dir='bin'/>" >> build.xml
        echo "        <dx input='bin/classes' output='bin/classes.dex'/>" >> build.xml
        echo "        <aapt executable='$env:ANDROID_HOME/build-tools/25.0.3/aapt.exe' command='package' versioncode='1' debug='false' manifest='AndroidManifest.xml' assets='assets' res='res' out='bin/resources.ap_'/>" >> build.xml
        echo "        <apkbuilder outfile='bin/app-release.apk' signed='true' signedjar='bin/app-release-signed.apk' keystore='${key.store}' storepass='${key.store.password}' alias='${key.alias}' keypass='${key.alias.password}'>" >> build.xml
        echo "            <sourcefolder path='bin/classes.dex'/>" >> build.xml
        echo "            <sourcefolder path='bin/resources.ap_'/>" >> build.xml
        echo "        </apkbuilder>" >> build.xml
        echo "        <zipalign in='bin/app-release-signed.apk' out='bin/app-release.apk'/>" >> build.xml
        echo "    </target>" >> build.xml
        echo "</project>" >> build.xml
        
    - name: Build with Ant
      run: |
        cmd /c "ant build"
      env:
        ANDROID_HOME: ${{ env.ANDROID_HOME }}
        ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release
        path: bin/*-release.apk
        
    - name: Run Lint
      run: |
        cmd /c "$env:ANDROID_HOME\tools\bin\lint --config lint.xml ."
      env:
        ANDROID_HOME: ${{ env.ANDROID_HOME }}
        ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        
    - name: Notify Slack on Build Status
      if: always()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "${{ job.status == 'success' && ':white_check_mark:' || ':x:' }} Android CI 빌드 결과\n• 성공 유무: ${{ job.status }}\n• 저장소: ${{ github.repository }}\n• 브랜치: ${{ github.ref_name }}\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|빌드된 APK 다운로드 링크>"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING-WEBHOOK 