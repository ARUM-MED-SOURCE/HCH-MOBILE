name: Android Build

on:
  pull_request:
    types: [opened, synchronize]
    branches: [dev,main]

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Install Android SDK
      uses: android-actions/setup-android@v2
      with:
        api-level: 29
        build-tools-version: '25.0.3'
        platform: 'android-29'
        
    - name: Create local.properties
      run: |
        echo "sdk.dir=$env:ANDROID_HOME" > local.properties
        
    - name: Create gradle.properties
      run: |
        echo "org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8" > gradle.properties
        echo "android.useAndroidX=true" >> gradle.properties
        echo "android.enableJetifier=true" >> gradle.properties
        
    - name: Create build.gradle
      run: |
        echo "buildscript {" > build.gradle
        echo "  repositories {" >> build.gradle
        echo "    google()" >> build.gradle
        echo "    mavenCentral()" >> build.gradle
        echo "  }" >> build.gradle
        echo "  dependencies {" >> build.gradle
        echo "    classpath 'com.android.tools.build:gradle:7.0.4'" >> build.gradle
        echo "  }" >> build.gradle
        echo "}" >> build.gradle
        echo "" >> build.gradle
        echo "allprojects {" >> build.gradle
        echo "  repositories {" >> build.gradle
        echo "    google()" >> build.gradle
        echo "    mavenCentral()" >> build.gradle
        echo "  }" >> build.gradle
        echo "}" >> build.gradle
        
    - name: Create app/build.gradle
      run: |
        mkdir -p app
        echo "apply plugin: 'com.android.application'" > app/build.gradle
        echo "" >> app/build.gradle
        echo "android {" >> app/build.gradle
        echo "  compileSdkVersion 29" >> app/build.gradle
        echo "  buildToolsVersion '30.0.2'" >> app/build.gradle
        echo "" >> app/build.gradle
        echo "  defaultConfig {" >> app/build.gradle
        echo "    applicationId 'com.hch.mobile'" >> app/build.gradle
        echo "    minSdkVersion 21" >> app/build.gradle
        echo "    targetSdkVersion 29" >> app/build.gradle
        echo "    versionCode 1" >> app/build.gradle
        echo "    versionName '1.0'" >> app/build.gradle
        echo "  }" >> app/build.gradle
        echo "" >> app/build.gradle
        echo "  signingConfigs {" >> app/build.gradle
        echo "    release {" >> app/build.gradle
        echo "      storeFile file('../keystore/umkey')" >> app/build.gradle
        echo "      storePassword '${{ secrets.KEY_STORE_PASSWORD }}'" >> app/build.gradle
        echo "      keyAlias 'umkey'" >> app/build.gradle
        echo "      keyPassword '${{ secrets.KEY_ALIAS_PASSWORD }}'" >> app/build.gradle
        echo "    }" >> app/build.gradle
        echo "  }" >> app/build.gradle
        echo "" >> app/build.gradle
        echo "  buildTypes {" >> app/build.gradle
        echo "    release {" >> app/build.gradle
        echo "      minifyEnabled false" >> app/build.gradle
        echo "      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'" >> app/build.gradle
        echo "      signingConfig signingConfigs.release" >> app/build.gradle
        echo "    }" >> app/build.gradle
        echo "  }" >> app/build.gradle
        echo "" >> app/build.gradle
        echo "  sourceSets {" >> app/build.gradle
        echo "    main {" >> app/build.gradle
        echo "      manifest.srcFile 'src/main/AndroidManifest.xml'" >> app/build.gradle
        echo "      java.srcDirs = ['src/main/java']" >> app/build.gradle
        echo "      res.srcDirs = ['src/main/res']" >> app/build.gradle
        echo "      assets.srcDirs = ['src/main/assets']" >> app/build.gradle
        echo "    }" >> app/build.gradle
        echo "  }" >> app/build.gradle
        echo "}" >> app/build.gradle
        
    - name: Move source files to Gradle structure
      run: |
        mkdir -p app/src/main/java
        mkdir -p app/src/main/res
        mkdir -p app/src/main/assets
        cp -r src/* app/src/main/java/
        cp -r res/* app/src/main/res/
        cp -r assets/* app/src/main/assets/
        cp AndroidManifest.xml app/src/main/
        
    - name: Create settings.gradle
      run: |
        echo "include ':app'" > settings.gradle
        
    - name: Create gradle wrapper
      run: |
        gradle wrapper
        
    - name: Build with Gradle
      run: |
        ./gradlew assembleRelease
      env:
        ANDROID_HOME: ${{ env.ANDROID_HOME }}
        ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release
        path: app/build/outputs/apk/release/*-release.apk
        
    - name: Run Lint
      run: |
        ./gradlew lint
      env:
        ANDROID_HOME: ${{ env.ANDROID_HOME }}
        ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        
    - name: Notify Slack on Build Status
      if: always()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "${{ job.status == 'success' && ':white_check_mark:' || ':x:' }} Android CI 빌드 결과\n• 성공 유무: ${{ job.status }}\n• 저장소: ${{ github.repository }}\n• 브랜치: ${{ github.ref_name }}\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|빌드된 APK 다운로드 링크>"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING-WEBHOOK 